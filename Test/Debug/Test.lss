
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000340  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800078  00800078  000003ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000958  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068a  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040c  00000000  00000000  0000148a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003af  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002191  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  8a:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HienThiMatranLed>:

void CountDown_LedMatrix(unsigned int time) {
	while (time) {
		
	}
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	eb 01       	movw	r28, r22
  98:	2a e0       	ldi	r18, 0x0A	; 10
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	b9 01       	movw	r22, r18
  9e:	0e 94 76 01 	call	0x2ec	; 0x2ec <__divmodhi4>
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	48 bb       	out	0x18, r20	; 24
  a6:	fb 01       	movw	r30, r22
  a8:	e4 59       	subi	r30, 0x94	; 148
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	40 81       	ld	r20, Z
  ae:	4b bb       	out	0x1b, r20	; 27
  b0:	e3 ec       	ldi	r30, 0xC3	; 195
  b2:	f9 e0       	ldi	r31, 0x09	; 9
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <HienThiMatranLed+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <HienThiMatranLed+0x28>
  ba:	00 00       	nop
  bc:	42 e0       	ldi	r20, 0x02	; 2
  be:	48 bb       	out	0x18, r20	; 24
  c0:	fc 01       	movw	r30, r24
  c2:	e4 59       	subi	r30, 0x94	; 148
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	80 81       	ld	r24, Z
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	83 ec       	ldi	r24, 0xC3	; 195
  cc:	99 e0       	ldi	r25, 0x09	; 9
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <HienThiMatranLed+0x3c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <HienThiMatranLed+0x42>
  d4:	00 00       	nop
  d6:	ce 01       	movw	r24, r28
  d8:	b9 01       	movw	r22, r18
  da:	0e 94 76 01 	call	0x2ec	; 0x2ec <__divmodhi4>
  de:	24 e0       	ldi	r18, 0x04	; 4
  e0:	28 bb       	out	0x18, r18	; 24
  e2:	fb 01       	movw	r30, r22
  e4:	e4 59       	subi	r30, 0x94	; 148
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	20 81       	ld	r18, Z
  ea:	2b bb       	out	0x1b, r18	; 27
  ec:	e3 ec       	ldi	r30, 0xC3	; 195
  ee:	f9 e0       	ldi	r31, 0x09	; 9
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <HienThiMatranLed+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <HienThiMatranLed+0x64>
  f6:	00 00       	nop
  f8:	28 e0       	ldi	r18, 0x08	; 8
  fa:	28 bb       	out	0x18, r18	; 24
  fc:	fc 01       	movw	r30, r24
  fe:	e4 59       	subi	r30, 0x94	; 148
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	80 81       	ld	r24, Z
 104:	8b bb       	out	0x1b, r24	; 27
 106:	83 ec       	ldi	r24, 0xC3	; 195
 108:	99 e0       	ldi	r25, 0x09	; 9
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <HienThiMatranLed+0x78>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <HienThiMatranLed+0x7e>
 110:	00 00       	nop
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <init_MatrixLed>:
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	8a bb       	out	0x1a, r24	; 26
 11c:	87 bb       	out	0x17, r24	; 23
 11e:	08 95       	ret

00000120 <Traffic_Light>:
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	86 2b       	or	r24, r22
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret

00000132 <init_PORT>:
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
 136:	87 bb       	out	0x17, r24	; 23
 138:	84 bb       	out	0x14, r24	; 20
 13a:	11 ba       	out	0x11, r1	; 17
 13c:	08 95       	ret

0000013e <main>:


int main(void)
{
	init_PORT();
 13e:	0e 94 99 00 	call	0x132	; 0x132 <init_PORT>
	init_MatrixLed();
 142:	0e 94 8c 00 	call	0x118	; 0x118 <init_MatrixLed>
	TCCR1B = (1<<CS12);
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 34286;
 14a:	2e ee       	ldi	r18, 0xEE	; 238
 14c:	35 e8       	ldi	r19, 0x85	; 133
 14e:	3d bd       	out	0x2d, r19	; 45
 150:	2c bd       	out	0x2c, r18	; 44
	TIMSK = (1<<TOIE1);
 152:	89 bf       	out	0x39, r24	; 57
	sei();
 154:	78 94       	sei
	LightTime1 = TimeConfig_1[index1];
 156:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <index1>
 15a:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <index1+0x1>
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	ea 59       	subi	r30, 0x9A	; 154
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	80 81       	ld	r24, Z
 168:	91 81       	ldd	r25, Z+1	; 0x01
 16a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <LightTime1+0x1>
 16e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <LightTime1>
	LightTime2 = TimeConfig_2[index2];
 172:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end>
 176:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x1>
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	e0 5a       	subi	r30, 0xA0	; 160
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	80 81       	ld	r24, Z
 184:	91 81       	ldd	r25, Z+1	; 0x01
 186:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <LightTime2+0x1>
 18a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <LightTime2>
	int Light1 = 0, Light2 = 0;
 18e:	00 e0       	ldi	r16, 0x00	; 0
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
	while (1) {
		if (index1 == 0) {
 196:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <index1>
 19a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <index1+0x1>
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	31 f0       	breq	.+12     	; 0x1ae <main+0x70>
			Light1 = GREEN_LIGHT;
		}
		else if (index1 == 1) {
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	31 f0       	breq	.+12     	; 0x1b4 <main+0x76>
			Light1 = YELLOW_LIGHT;
		}
		else if (index1 == 2) {
 1a8:	02 97       	sbiw	r24, 0x02	; 2
 1aa:	49 f4       	brne	.+18     	; 0x1be <main+0x80>
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <main+0x7c>
	LightTime1 = TimeConfig_1[index1];
	LightTime2 = TimeConfig_2[index2];
	int Light1 = 0, Light2 = 0;
	while (1) {
		if (index1 == 0) {
			Light1 = GREEN_LIGHT;
 1ae:	c4 e0       	ldi	r28, 0x04	; 4
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <main+0x80>
		}
		else if (index1 == 1) {
			Light1 = YELLOW_LIGHT;
 1b4:	c2 e0       	ldi	r28, 0x02	; 2
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <main+0x80>
		}
		else if (index1 == 2) {
			Light1 = RED_LIGHT;
 1ba:	c1 e0       	ldi	r28, 0x01	; 1
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		if (index2 == 0) {
 1be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <main+0x98>
			Light2 = RED_LIGHT;
		}
		else if (index2 == 1) {
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 05       	cpc	r25, r1
 1ce:	31 f0       	breq	.+12     	; 0x1dc <main+0x9e>
			Light2 = YELLOW_LIGHT;
		}
		else if (index2 == 2) {
 1d0:	02 97       	sbiw	r24, 0x02	; 2
 1d2:	49 f4       	brne	.+18     	; 0x1e6 <main+0xa8>
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <main+0xa4>
		else if (index1 == 2) {
			Light1 = RED_LIGHT;
		}
		
		if (index2 == 0) {
			Light2 = RED_LIGHT;
 1d6:	01 e0       	ldi	r16, 0x01	; 1
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <main+0xa8>
		}
		else if (index2 == 1) {
			Light2 = YELLOW_LIGHT;
 1dc:	02 e0       	ldi	r16, 0x02	; 2
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <main+0xa8>
		}
		else if (index2 == 2) {
			Light2 = GREEN_LIGHT;
 1e2:	04 e0       	ldi	r16, 0x04	; 4
 1e4:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		HienThiMatranLed(LightTime1, LightTime2);
 1e6:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <LightTime2>
 1ea:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <LightTime2+0x1>
 1ee:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <LightTime1>
 1f2:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <LightTime1+0x1>
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <HienThiMatranLed>
		Traffic_Light(Light1,Light2);
 1fa:	b8 01       	movw	r22, r16
 1fc:	ce 01       	movw	r24, r28
 1fe:	0e 94 90 00 	call	0x120	; 0x120 <Traffic_Light>
	}
 202:	c9 cf       	rjmp	.-110    	; 0x196 <main+0x58>

00000204 <__vector_8>:
	
}

ISR (TIMER1_OVF_vect ){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	TCNT1=34286; //gan gia tri khoi tao cho T/C1
 222:	8e ee       	ldi	r24, 0xEE	; 238
 224:	95 e8       	ldi	r25, 0x85	; 133
 226:	9d bd       	out	0x2d, r25	; 45
 228:	8c bd       	out	0x2c, r24	; 44
	tbit(PORTB,0);
 22a:	98 b3       	in	r25, 0x18	; 24
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	89 27       	eor	r24, r25
 230:	88 bb       	out	0x18, r24	; 24
	tbit(PORTB,1);
 232:	98 b3       	in	r25, 0x18	; 24
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	89 27       	eor	r24, r25
 238:	88 bb       	out	0x18, r24	; 24
	if (LightTime1 >= 0) {
 23a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <LightTime1>
 23e:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <LightTime1+0x1>
 242:	99 23       	and	r25, r25
 244:	fc f0       	brlt	.+62     	; 0x284 <__vector_8+0x80>
		LightTime1--;
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <LightTime1+0x1>
 24c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <LightTime1>
		if (LightTime1 == -1) {
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	c1 f4       	brne	.+48     	; 0x284 <__vector_8+0x80>
			index1 = (++index1) % 3;
 254:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <index1>
 258:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <index1+0x1>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	0e 94 76 01 	call	0x2ec	; 0x2ec <__divmodhi4>
 266:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <index1+0x1>
 26a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <index1>
			LightTime1 = TimeConfig_1[index1];
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	fc 01       	movw	r30, r24
 274:	ea 59       	subi	r30, 0x9A	; 154
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	80 81       	ld	r24, Z
 27a:	91 81       	ldd	r25, Z+1	; 0x01
 27c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <LightTime1+0x1>
 280:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <LightTime1>
		}
	}
	
	if (LightTime2 >= 0) {
 284:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LightTime2>
 288:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <LightTime2+0x1>
 28c:	99 23       	and	r25, r25
 28e:	fc f0       	brlt	.+62     	; 0x2ce <__vector_8+0xca>
		LightTime2--;
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <LightTime2+0x1>
 296:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <LightTime2>
		if (LightTime2 == -1) {
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	c1 f4       	brne	.+48     	; 0x2ce <__vector_8+0xca>
			index2 = (++index2) % 3;
 29e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 2a2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	0e 94 76 01 	call	0x2ec	; 0x2ec <__divmodhi4>
 2b0:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 2b4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
			LightTime2 = TimeConfig_2[index2];
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	fc 01       	movw	r30, r24
 2be:	e0 5a       	subi	r30, 0xA0	; 160
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	80 81       	ld	r24, Z
 2c4:	91 81       	ldd	r25, Z+1	; 0x01
 2c6:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <LightTime2+0x1>
 2ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <LightTime2>
		}
	}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__divmodhi4>:
 2ec:	97 fb       	bst	r25, 7
 2ee:	07 2e       	mov	r0, r23
 2f0:	16 f4       	brtc	.+4      	; 0x2f6 <__divmodhi4+0xa>
 2f2:	00 94       	com	r0
 2f4:	07 d0       	rcall	.+14     	; 0x304 <__divmodhi4_neg1>
 2f6:	77 fd       	sbrc	r23, 7
 2f8:	09 d0       	rcall	.+18     	; 0x30c <__divmodhi4_neg2>
 2fa:	0e 94 8a 01 	call	0x314	; 0x314 <__udivmodhi4>
 2fe:	07 fc       	sbrc	r0, 7
 300:	05 d0       	rcall	.+10     	; 0x30c <__divmodhi4_neg2>
 302:	3e f4       	brtc	.+14     	; 0x312 <__divmodhi4_exit>

00000304 <__divmodhi4_neg1>:
 304:	90 95       	com	r25
 306:	81 95       	neg	r24
 308:	9f 4f       	sbci	r25, 0xFF	; 255
 30a:	08 95       	ret

0000030c <__divmodhi4_neg2>:
 30c:	70 95       	com	r23
 30e:	61 95       	neg	r22
 310:	7f 4f       	sbci	r23, 0xFF	; 255

00000312 <__divmodhi4_exit>:
 312:	08 95       	ret

00000314 <__udivmodhi4>:
 314:	aa 1b       	sub	r26, r26
 316:	bb 1b       	sub	r27, r27
 318:	51 e1       	ldi	r21, 0x11	; 17
 31a:	07 c0       	rjmp	.+14     	; 0x32a <__udivmodhi4_ep>

0000031c <__udivmodhi4_loop>:
 31c:	aa 1f       	adc	r26, r26
 31e:	bb 1f       	adc	r27, r27
 320:	a6 17       	cp	r26, r22
 322:	b7 07       	cpc	r27, r23
 324:	10 f0       	brcs	.+4      	; 0x32a <__udivmodhi4_ep>
 326:	a6 1b       	sub	r26, r22
 328:	b7 0b       	sbc	r27, r23

0000032a <__udivmodhi4_ep>:
 32a:	88 1f       	adc	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	5a 95       	dec	r21
 330:	a9 f7       	brne	.-22     	; 0x31c <__udivmodhi4_loop>
 332:	80 95       	com	r24
 334:	90 95       	com	r25
 336:	bc 01       	movw	r22, r24
 338:	cd 01       	movw	r24, r26
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
